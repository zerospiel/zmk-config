#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Layers from the QMK config
#define BASE 0
#define SYM 1
#define NAV 2
#define NUM 3
#define EXTRA 4

// QMK-ish aliases
#define XXX &none
#define ___ &trans

#define CMDBSPC  &kp LG(BSPC)
#define ALTBSPC  &kp LA(BSPC)
#define CMDZ     &kp LG(Z)
#define CMDX     &kp LG(X)
#define CMDC     &kp LG(C)
#define CMDV     &kp LG(V)
#define LA_EXTRA &tog EXTRA

&caps_word {
    continue-list = <MINUS BSPC DEL UNDER>;
};

&sk {
    release-after-ms = <100000000>; // indefinite
	ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_weEsc {
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        combo_hjGJ {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LG(J)>;
        };
    };

    macros {
        la_nav: cancel_queued_os_mods_and_toggle_nav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo NAV>
                , <&macro_tap &kp F22>
                , <&macro_pause_for_release>
                , <&macro_release &mo NAV>
                ;
        };

        la_sym: cancel_queued_os_mods_and_toggle_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo SYM>
                , <&macro_tap &kp F22>
                , <&macro_pause_for_release>
                , <&macro_release &mo SYM>
                ;
        };

		unstick: unstick_mods {
			compatible = "zmk,behavior-macro";
			label = "unstick mod";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
    };

    behaviors {
        sww: swap_window {
            compatible = "zmk,behavior-tri-state";
            label = "alt tab";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <2 10 32>;
        };

        swl: swap_language {
            compatible = "zmk,behavior-tri-state";
            label = "switch language";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp SPACE>, <&kt LGUI>;
            ignored-key-positions = <1 10 32>;
        };

        swt: swap_tab {
            compatible = "zmk,behavior-tri-state";
            label = "switch tabs";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
            ignored-key-positions = <3 10 32>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
		default_layer {
			label = "BASE";
			bindings = <
			&kp Q &kp W &kp E &kp R &kp T           &kp Y &kp U  &kp I     &kp O   &kp P
			&kp A &kp S &kp D &kp F &kp G           &kp H &kp J  &kp K     &kp L   &kp SEMI
			&kp Z &kp X &kp C &kp V &kp B           &kp N &kp M  &kp COMMA &kp DOT &kp SLASH
				        &la_nav &kp SPACE           &kp LSHFT &la_sym
			>;
		};

		sym_layer {
			label = "SYM";
			bindings = <
			&kp EXCL &kp AT    &kp HASH &kp DLLR &kp PRCNT          &kp CARET &kp RPAR &kp RBKT &kp AMPS  &kp STAR
			&kp DQT  &kp MINUS &kp LBKT &kp LPAR &kp PLUS           &kp GRAVE &sk RGUI &sk LALT &sk RCTRL &sk RSHFT // avoid RALT
			&kp SQT  &kp UNDER &kp LBRC &kp LT   &kp BSLH           &kp QMARK &kp GT   &kp RBRC &kp COLON &kp EQUAL
				                                  ___ ___           ___ XXX
			>;
		};

		nav_layer {
			label = "NAV";
			bindings = <
			&kp TAB   &swl      &sww     &swt      &kp C_VOL_UP      &kp TILDE  ALTBSPC    CMDBSPC    &kp K_MUTE &kp DEL
			&sk LSHFT &sk LCTRL &sk LALT &sk LGUI  &kp C_VOL_DN      &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp BSPC
			CMDZ      CMDX      CMDC     CMDV      &kp C_PP          &caps_word &kp C_PREV &kp C_NEXT LA_EXTRA   &kp ENTER
				                                        XXX ___      ___ ___
			>;
		};

		num_layer {
			label = "NUM";
			bindings = <
			&kp N1    &kp N2  &kp N3   &kp N4   &kp N5            &kp N6  &kp N7   &kp N8   &kp N9    &kp N0
			&sk LSHFT &kp DOT &sk LALT &sk LGUI &kp F11           &kp F12 &sk RGUI &sk LALT &sk RCTRL &sk RSHFT // avoid RALT
			&kp F1    &kp F2  &kp F3   &kp F4   &kp F5            &kp F6  &kp F7   &kp F8   &kp F9    &kp F10
				                                XXX XXX           XXX XXX
			>;
		};

        // TODO: pull mouse changes? convert to tri-state just for the mouse?
		extra_layer {
			label = "EXTRA";
			bindings = <
			&bootloader XXX /*WH_D*/ XXX /*MS_U*/ XXX /*WH_U*/ XXX                 &kp C_BRI_UP &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bootloader
			&sys_reset  XXX /*MS_L*/ XXX /*MS_D*/ XXX /*MS_R*/ &mkp MB4            &kp C_BRI_DN &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 &sys_reset
			XXX         &mkp MB1     &mkp MB3     &mkp MB2     &mkp MB5            XXX          &bt BT_CLR   XXX          LA_EXTRA     &unstick
				                                               XXX XXX             XXX XXX
			>;
		};
    };
};
